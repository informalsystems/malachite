syntax = "proto3";

package test;

message Address {
    bytes value = 1;
}

message Value {
    optional bytes value = 1;
}

message ValueId {
    optional bytes value = 1;
}

enum VoteType {
   PREVOTE = 0;
   PRECOMMIT = 1;
}

message Vote {
    VoteType vote_type = 1;
    uint64 height = 2;
    uint32 round = 3;
    ValueId value = 4;
    Address validator_address = 5;
}

message SignedMessage {
    oneof message {
        Proposal proposal = 1;
        Vote vote = 2;
    }
    Signature signature = 3;
}

message Proposal {
    uint64 height = 1;
    uint32 round = 2;
    Value value = 3;
    optional uint32 pol_round = 4;
    Address validator_address = 5;
    // FaB: Certificate containing 4f+1 prevotes to justify this proposal
    // Required for rounds > 0, None for round 0
    optional Certificate certificate = 6;
}

// FaB: Certificate is a Vec<SignedVote> containing 4f+1 prevote messages
// Used to justify proposals in rounds > 0 (SafeProposal validation)
message Certificate {
    repeated SignedMessage votes = 1;
}

message Signature {
    bytes bytes = 1;
}

message ProposalPart {
    oneof part {
        ProposalInit init = 1;
        ProposalData data = 2;
        ProposalFin fin = 3;
    }
}

message ProposalInit {
    uint64 height = 1;
    uint32 round = 2;
    Address proposer = 4;
    optional uint32 pol_round = 5;
}

message ProposalData {
    uint64 factor = 1;
}

message ProposalFin {
    Signature signature = 1;
}

message Extension {
    bytes data = 1;
    Signature signature = 2;
}

message StreamMessage {
    bytes stream_id = 1;
    uint64 sequence = 2;
    oneof content {
        // Serialized content.
        bytes data = 3;
        // Fin must be set to true.
        bool fin = 4;
    }
}
